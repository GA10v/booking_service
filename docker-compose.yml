version: '3.9'

services:
  nginx:
    container_name: nginx
    image: nginx:1.23
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/configs:/etc/nginx/conf.d:ro
    depends_on:
      booking_api:
        condition: service_started
    ports:
      - 8080:8080
    restart: always
    networks:
      - project-network
    logging:
      driver: gelf
      options:
        gelf-address: udp://127.0.0.1:5044
        tag: nginx

  postgres:
    container_name: postgres
    image: postgres:15.2-alpine3.17
    restart: always
    volumes:
      - ./dump.sql:/docker-entrypoint-initdb.d/init.sql
      - postgres_data:/var/lib/postgresql/data/
    env_file:
      - .env
    networks:
      - project-network
    healthcheck:
      test: [ "CMD-SHELL", "su postgres", "&&", "pg_isready" ]
      interval: 5s
      timeout: 5s
      retries: 10

  booking_api:
    container_name: booking_api
    build:
      context: backend/Booking/booking_api
      dockerfile: Dockerfile
    restart: always
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      url_shortener:
        condition: service_started
    networks:
      - project-network
    logging:
      driver: gelf
      options:
        gelf-address: udp://127.0.0.1:5044
        tag: booking_api

  watcher:
    container_name: watcher
    build:
      context: backend/Booking/watcher
      dockerfile: Dockerfile
    restart: always
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      booking_api:
        condition: service_started
    networks:
      - project-network
    logging:
      driver: gelf
      options:
        gelf-address: udp://127.0.0.1:5044
        tag: watcher

  redis:
    container_name: redis
    image: redis:7.0.4-alpine
    restart: always
    expose:
      - 6379
    volumes:
      - cache:/data
    networks:
      - project-network
    healthcheck:
      test: redis-cli ping

  mock_movie_api:
    container_name: mock_movie_api
    build:
      context: backend/Movie_API/mock
      dockerfile: Dockerfile
    restart: always
    env_file:
      - .env
    networks:
      - project-network

  mock_auth:
    container_name: mock_auth
    build:
      context: backend/Auth/mock
      dockerfile: Dockerfile
    restart: always
    env_file:
      - .env
    networks:
      - project-network

  mock_ugc:
    container_name: mock_ugc
    build:
      context: backend/UGC/mock
      dockerfile: Dockerfile
    restart: always
    env_file:
      - .env
    networks:
      - project-network

  url_shortener:
    container_name: url_shortener
    build:
      context: backend/url_shortener
      dockerfile: Dockerfile
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
    env_file:
      - .env
    networks:
      - project-network

  mongors1n1:
    container_name: mongors1n1
    image: mongo:6.0.5-jammy
    command: mongod --shardsvr --replSet mongors1 --dbpath /data/db --port 27017
    expose:
      - "27017"
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /tmp/mongo_cluster/data1:/data/db
    deploy:
      resources:
        limits:
          memory: 2G
    networks:
      - project-network

  mongors1n2:
    container_name: mongors1n2
    image: mongo:6.0.5-jammy
    command: mongod --shardsvr --replSet mongors1 --dbpath /data/db --port 27017
    expose:
      - "27017"
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /tmp/mongo_cluster/data2:/data/db
    deploy:
      resources:
        limits:
          memory: 2G
    networks:
      - project-network

  mongors1n3:
    container_name: mongors1n3
    image: mongo:6.0.5-jammy
    command: mongod --shardsvr --replSet mongors1 --dbpath /data/db --port 27017
    expose:
      - "27017"
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /tmp/mongo_cluster/data3:/data/db
    deploy:
      resources:
        limits:
          memory: 2G
    networks:
      - project-network

  mongors2n1:
    container_name: mongors2n1
    image: mongo:6.0.5-jammy
    command: mongod --shardsvr --replSet mongors2 --dbpath /data/db --port 27017
    expose:
      - "27017"
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /tmp/mongo_cluster/data4:/data/db
    deploy:
      resources:
        limits:
          memory: 2G
    networks:
      - project-network

  mongors2n2:
    container_name: mongors2n2
    image: mongo:6.0.5-jammy
    command: mongod --shardsvr --replSet mongors2 --dbpath /data/db --port 27017
    expose:
      - "27017"
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /tmp/mongo_cluster/data5:/data/db
    deploy:
      resources:
        limits:
          memory: 2G
    networks:
      - project-network

  mongors2n3:
    container_name: mongors2n3
    image: mongo:6.0.5-jammy
    command: mongod --shardsvr --replSet mongors2 --dbpath /data/db --port 27017
    expose:
      - "27017"
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /tmp/mongo_cluster/data6:/data/db
    deploy:
      resources:
        limits:
          memory: 2G
    networks:
      - project-network

  mongocfg1:
    container_name: mongocfg1
    image: mongo:6.0.5-jammy
    command: mongod --configsvr --replSet mongors1conf --dbpath /data/db --bind_ip_all --port 27017
    expose:
      - "27017"
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /tmp/mongo_cluster/config1:/data/db
    deploy:
      resources:
        limits:
          memory: 1G
    networks:
      - project-network

  mongocfg2:
    container_name: mongocfg2
    image: mongo:6.0.5-jammy
    command: mongod --configsvr --replSet mongors1conf --dbpath /data/db --bind_ip_all --port 27017
    expose:
      - "27017"
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /tmp/mongo_cluster/config2:/data/db
    deploy:
      resources:
        limits:
          memory: 1G
    networks:
      - project-network

  mongocfg3:
    container_name: mongocfg3
    image: mongo:6.0.5-jammy
    command: mongod --configsvr --replSet mongors1conf --dbpath /data/db --bind_ip_all --port 27017
    expose:
      - "27017"
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /tmp/mongo_cluster/config3:/data/db
    deploy:
      resources:
        limits:
          memory: 1G
    networks:
      - project-network

  mongos1:
    container_name: mongos1
    image: mongo:6.0.5-jammy
    depends_on:
      - mongocfg1
      - mongocfg2
    command: mongos --configdb mongors1conf/mongocfg1:27071,mongocfg2:27017,mongocfg3:27017 --bind_ip 0.0.0.0 --port 27017
    ports:
      - "27019:27017"
    expose:
      - "27017"
    volumes:
      - /etc/localtime:/etc/localtime:ro
    deploy:
      resources:
        limits:
          memory: 2G
    networks:
      - project-network

  mongos2:
    container_name: mongos2
    image: mongo:6.0.5-jammy
    depends_on:
      - mongocfg1
      - mongocfg2
    command: mongos --configdb mongors1conf/mongocfg1:27071,mongocfg2:27017,mongocfg3:27017 --bind_ip 0.0.0.0 --port 27017
    ports:
      - "27020:27017"
    expose:
      - "27017"
    volumes:
      - /etc/localtime:/etc/localtime:ro
    deploy:
      resources:
        limits:
          memory: 2G
    networks:
      - project-network

  mongosetup:
    container_name: mongosetup
    image: mongo:6.0.5-jammy
    depends_on:
      - mongocfg1
      - mongocfg2
      - mongocfg3
      - mongors1n1
      - mongors1n2
      - mongors1n3
      - mongors2n1
      - mongors2n2
      - mongors2n3
      - mongos1
      - mongos2
    env_file:
      - .env
    restart: "no"
    volumes:
      - ./scripts:/scripts
    entrypoint: [ "bash", "-c", "sh ./scripts/setup.sh" ]
    networks:
      - project-network

  booking_review_api:
    container_name: booking_review_api
    build:
      context: backend/Booking/review_api
      dockerfile: Dockerfile
    restart: always
    env_file:
      - .env
    depends_on:
      - mongocfg1
      - mongocfg2
      - mongocfg3
      - mongors1n1
      - mongors1n2
      - mongors1n3
      - mongors2n1
      - mongors2n2
      - mongors2n3
      - mongos1
      - mongos2
    networks:
      - project-network
    logging:
      driver: gelf
      options:
        gelf-address: udp://127.0.0.1:5044
        tag: review_api


volumes:
  postgres_data:
  cache:


networks:
  project-network:
    external: true
