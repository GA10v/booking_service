@startuml workers
' !theme materia
autonumber
skinparam sequence {
	ParticipantPadding 20
	MessageAlign center
}

title Workers

participant Client as Client
participant "Booking API" as API
participant "Service" as Service
participant "Service broker" as Broker_Service
participant "Service broker" as Broker_Service
queue RabbitMQ
participant "Worker broker" as Broker_Worker
participant "Worker" as Worker
database "Booking DB" as DB_Booking
database "Cache" as Cache_Worker
participant DB_Booking
participant Auth
participant Notification
participant Movie_API
participant Url_shortner
participant UGC

Client -> API: Request + access_token
API -> API:
note right
    - проверка access_token
    - получение user_id
    - валидация параметров
end note
API -> Service: pydantic.BaseModel | dict[str, Any]
Service -> Broker_Service: pydantic.BaseModel
Broker_Service -> Broker_Service:
note right
    создание очереди:
    - <uuid>:incoming ttl
end note
Broker_Service -> Broker_Service:
note right
    -создание консьюмера
    который слушает очередь
    <uuid>:incoming
end note
Broker_Service -> RabbitMQ: b'str'
note left
    в headers передаем новую очередь
    - <uuid>:incoming
end note
RabbitMQ -> Broker_Worker: b'str'
Broker_Worker -> Broker_Worker
note right
    - читаем headers
    - init Producer()
    - биндим его на очередь <uuid>:incoming
    - вызываем функцию callback и передаем инстанс Producer()
end note
Broker_Worker -> Worker: Producer(), pydantic.BaseModel | dict[str, Any]

Worker -> Cache_Worker: get(key)
Worker <- Cache_Worker: value | None
group #B1C7E8 get_payload
    Worker -> DB_Booking: query: Union[Select, Insert, Update, Delete]
    Worker <- DB_Booking: execute(query)
    Worker -> Cache_Worker: set(key, value)
    Worker -> Auth
    Worker <- Auth: user_info
    Worker -> Cache_Worker: set(key: str, value: dict)
    Worker -> Movie_API
    Worker <- Movie_API: movie_info
    Worker -> Cache_Worker: set(key: str, value: dict)
    Worker -> Url_shortner
    Worker <- Url_shortner: str'short utl'
    Worker -> UGC
    Worker <- UGC
end group
Worker -> Worker
note right
    - обрабатываем информацию
    - формируем msg для Producer
    - отправляем msg в очередь <uuid>:incoming
    - закрываемся
end note

Worker -> RabbitMQ: b'str'
Broker_Service <- RabbitMQ: b'str'

Broker_Service -> Broker_Service
note right
    - консьюмер получает msg
    - функция callback возвращает pydantic.BaseModel | dict[str, Any]
    - [?] удаляет очередь
    - закрываемся
end note
Broker_Service -> Service: pydantic.BaseModel | dict[str, Any
Service -> API: Response
Service -> Notification: Event
API -> Client: Response
@enduml