@startuml layers
' !theme materia
autonumber
skinparam sequence {
	ParticipantPadding 20
	MessageAlign center
}

title Layers

participant Client as Client
participant "Booking API" as API
participant "Service" as Service
database "Cache" as Cache_Service
database "Booking DB" as DB_Booking
participant DB_Booking
participant Auth
participant Notification
participant Movie_API
participant Url_shortner
participant UGC

Client -> API: Request + access_token
API -> API:
note right
    - проверка access_token
    - получение user_id
    - валидация параметров
end note
API -> Service: pydantic.BaseModel | dict[str, Any]

group service_layer
    Service -> Service
    note right
        слой в котором реализован class Service()
        - вызывает Driver()
    end note
    Service -> Cache_Service: get(key: str)
    Service <- Cache_Service: value | None
end group

group #B1C7E8 driver_layer
    Service -> Service
    note right
        слой в котором через protocol реализованы драйверы
        - DB_driver
        - Auth_driver
        - Notification_driver
        - Movie_driver
        - Shortner_driver
        - UGC_driver
    end note

    Service -> DB_Booking: query: Union[Select, Insert, Update, Delete]
    Service <- DB_Booking: execute(query)
    Service -> Cache_Service: set(key, value)
    Service -> Auth
    Service <- Auth: user_info
    Service -> Cache_Service: set(key: str, value: dict)
    Service -> Movie_API
    Service <- Movie_API: movie_info
    Service -> Cache_Service: set(key: str, value: dict)
    Service -> Url_shortner
    Service <- Url_shortner: str'short utl'
    Service -> UGC
    Service <- UGC

end group
Service -> Cache_Service : set(key: str, value: dict)
Service -> API: Response
Service -> Notification: Event
API -> Client: Response
@enduml